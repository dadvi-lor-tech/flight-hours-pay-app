# Application Information
# ~~~~~
application.name = Flight
application.description = Hours monitoring & payslip
application.version = 1.1.0

# Author/Company
# ~~~~~
application.author = David Trochel
application.copyright = Copyright (c) {year} David Trochel. All Rights Reserved.

# Header Logo
# ~~~~~
# Should be 40px in height with transparent background
application.logo = img/plane-solid.svg

# Home Website
# ~~~~~
# Link to be used with header logo
application.home = https://github.com/trochel/flight-hours-pay-app

# Link to the online help
# ~~~~~
application.help = https://docs.axelor.com/adk/6.1

# Application deployment mode
# ~~~~~
# Set to 'dev' for development mode else 'prod'
application.mode = prod

# CSS Theme
# ~~~~~
# Set default CSS theme, for example `blue`
application.theme =

# Default Locale (language)
# ~~~~~
# Set default application locale (en, fr, fr_FR, en_US)
application.locale = fr

# Database settings
# ~~~~~
# See hibernate documentation for connection parameters

# PostgreSQL
db.default.dialect = org.hibernate.dialect.PostgreSQLDialect
db.default.driver = org.postgresql.Driver
db.default.ddl = update
db.default.url = jdbc:postgresql://localhost:5432/
db.default.user = 
db.default.password = 

# Date Format
# ~~~~~
date.format = dd/MM/yyyy

# Timezone
# ~~~~~
date.timezone = UTC

# Session timeout (in minutes)
# ~~~~~
session.timeout = 60

# Storage path for upload files (attachments)
# ~~~~~
# use {user.home} key to save files under user home directory, or
# use absolute path where server user have write permission.
data.upload.dir = {user.home}/data/attachments

# Maximum upload size (in MB)
# ~~~~~
data.upload.max-size = 5

# The external report design directory
# ~~~~~
# this directory is searched for the rptdesign files
# (fallbacks to designs provided by modules)
reports.design.dir =

# Data export (csv) encoding
# ~~~~
# Use Windows-1252, ISO-8859-1 or ISO-8859-15 if targeting ms excel
# (excel does not recognize utf8 encoded csv)
data.export.encoding = ISO-8859-1

# Storage path for export action
# ~~~~~
data.export.dir = {user.home}/data/exports

# Specify whether to import demo data
# ~~~~~
data.import.demo-data = false

# Storage path for templates
# ~~~~~
template.search-dir = {user.home}/data/templates

# Encryption settings
# ~~~~~

encryption.password = D7mhMPHmNEPdTmTy

# optionally, algorithm mode (CBC or GCM)
encryption.algorithm = CBC


# Quartz Scheduler
# ~~~~~
# quartz job scheduler

# Specify whether to enable quartz scheduler
quartz.enable = false

# total number of threads in quartz thread pool
# the number of jobs that can run simultaneously
quartz.thread-count = 3

# View configuration
# ~~~~~

# Set to true to enable single view mode
view.single-tab = false

# Set menu style (left, top, both)
application.menu = left

# CORS configuration
# ~~~~~
# CORS settings to allow cross origin requests

# regular expression to test allowed origin or * to allow all (not recommended) or set to list of domains to allow (comma separated).
#cors.allow-origin = *
#cors.allow-credentials = true
#cors.allow-methods = GET,PUT,POST,DELETE,HEAD,OPTIONS
#cors.allow-headers = Origin,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,Access-Control-Request-Headers


# HikariCP connection pool
# ~~~~~
hibernate.hikari.minimumIdle = 1
hibernate.hikari.maximumPoolSize = 5
hibernate.hikari.idleTimeout = 300000


# Logging
# ~~~~~
# Custom logback configuration can be provided with `logging.config` property pointing
# to a custom `logback.xml`. In this case, all the logging configuration provided here
# will be ignored.
#
# Following settings can be used to configure logging system automatically.
#
#logging.path = {user.home}/.axelor/logs
#logging.pattern.file = %d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] %-40.40logger{39} : %m%n
#logging.pattern.console = %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n

logging.level.root = ERROR
logging.level.com.axelor = DEBUG

# Log everything. Good for troubleshooting
#logging.level.org.hibernate = INFO

# Log all SQL DML statements as they are executed
#logging.level.org.hibernate.SQL = DEBUG
#logging.level.org.hibernate.engine.jdbc = DEBUG

# Log all SQL DDL statements as they are executed
#logging.level.org.hibernate.tool.hbm2ddl = INFO

# Log all JDBC parameters
#logging.level.org.hibernate.type = ALL

# Log transactions
#logging.level.org.hibernate.transaction = DEBUG

# Log L2-Cache
#logging.level.org.hibernate.cache = DEBUG

# Log JDBC resource acquisition
#logging.level.org.hibernate.jdbc = TRACE
#logging.level.org.hibernate.service.jdbc = TRACE

# Log connection pooling
#logging.level.com.zaxxer.hikari = INFO

